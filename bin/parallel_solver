#!/usr/bin/env perl

use v5.14;
use lib 'lib';
use ICFP;
use BV::Parse;
use API;
use Evaluator;
use Parallel::ForkManager;
use Data::Printer;
use File::Slurp;

my $problems = API::get_pending_problems();
my @machines = read_file('avail_machines.txt', { chomp => 1 });
@machines = (@machines) x 2; # 2 per machine
p(@machines);

my $pm = Parallel::ForkManager->new(scalar @machines);

#  $problems = [
    #  {
        #  id        => "55NVf2C7bthwAJNFHqOblPcG",
        #  size      => 8,
        #  operators => [qw( if0 plus shl1 )]
    #  },
    #  {
        #  id        => "1ngcG8Lt9kn9wBB8I9S9668S",
        #  size      => 8,
        #  operators => [qw( or shl1 shr16 xor )]
    #  },
    #  {
        #  id        => "yYegNCtraiATA26HFdNHmczq",
        #  size      => 8,
        #  operators => [qw( not or plus shr4 )]
    #  },
    #  {
        #  id        => "6HONa6hBfx6Ap18HAlBpGRQ4",
        #  size      => 8,
        #  operators => [qw( and or )]
    #  },
#  ];


my $cur_machine = 0;
for my $problem ( @$problems ) {
#  next unless $problem->{size} == 10;
    #p($problem);
    my $machine = $machines[$cur_machine++];
    $cur_machine %= scalar @machines;
    my $id = $problem->{id};
    my $size = $problem->{size};
    my $oper_list = join(' ', @{ $problem->{operators} });

    $pm->start and next;

    say "$machine call solve_one on $id $size $oper_list";
    print `ssh $machine 'bash -lc "SHELL=/bin/bash source ~/perl5/perlbrew/etc/bashrc ; cd projects/icfp2013 ; nice bin/solve_one $id $size $oper_list > log/run_$id.log 2>&1"'`;
    say "solving $id done.";
    $pm->finish;
}

$pm->wait_all_children;

