#!/usr/bin/env perl

use v5.14;
use lib 'lib';
use ICFP;
use BV::Parse;
use API;
use Evaluator;
use Data::Printer;

my $size = shift @ARGV;

my $problems = API::get_pending_problems();

#  $problems = [{
  #  id => "z0a2IwBOuLowNP61JiIqA5zQ",
  #  size => 9,
  #  operators => [qw( shr4 tfold xor )]
#  }];

my $is_dry_run = 0;

for my $problem ( @$problems ) {
    next unless $problem->{size} == $size;
#p($problem);

    my $out;
    eval { $out = BV::Parse::generate( $size, $problem->{operators} ) };

    if ( $@ ) {
        say STDERR "\ngenerate died: $@";
        next;
    }
    if ( scalar @$out > 129000 ) {
        say STDERR "Got " . scalar @$out . ". Too many generated programs to check ... skipping";
        next;
    }

    my ($inputs, $solutions) = @{ BV::Parse::gridify( $out ) };
    # my ($inputs, $solutions) = @{ BV::Parse::treeify( $out ) };
    my $thinned = Evaluator::eliminate_the_weak( $problem->{id}, $inputs, $solutions, $is_dry_run );

#    if (scalar( @$thinned ) > 90) {
#        say STDERR "generated " . scalar( @$thinned ) . " functions - > 90 ... skipping";
#        next;
#    }
#    while ( scalar( @$thinned ) > 90 ) {
#        my ($new_inputs, $new_solutions) = BV::Parse::get_solutions( $size, $problem->{operators}, $thinned );
#        my $thinned = Evaluator::eliminate_the_weak( $problem->{id}, $new_inputs, $new_solutions, $is_dry_run );
#    }

    say STDERR "Trying " . scalar( @$thinned ) . " functions";
    my $start_time = time();

    for my $program ( @$thinned ) {
        say STDERR "guessing for id " . $problem->{id} . " and program $program";
        my $response = API::make_guess( $problem->{id}, $program, $is_dry_run );
        p($response);

        last if $response eq "time limit exceeded";
        last if ref($response) eq 'HASH' && $response->{status} eq 'win';
    }

    my $end_time = time();
    say STDERR "Took " . ($end_time - $start_time) . " seconds";
    #  last;
}
